<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
        default-lazy-init="false"> <!--default-autowire="byName"-->

    <context:property-placeholder
            location="classpath:/resource/app_${envType}.properties"/>

    <import resource="classpath:/dal/mybatis/applicationContext-mybatis.xml"/>

    <context:component-scan base-package="com.danny.seckill.domain"/>
    <context:component-scan base-package="com.danny.seckill.service"/>

    <!--
        4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
    -->
    <bean id="jdbcTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="globalRollbackOnParticipationFailure" value="false"/>
    </bean>

    <!--事务模板 -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager">
            <ref local="jdbcTransactionManager"/>
        </property>
        <!--ISOLATION_DEFAULT 表示由使用的数据库决定  -->
        <property name="readOnly" value="false"></property>
        <property name="isolationLevelName" value="ISOLATION_DEFAULT"/>
        <!--<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>-->
        <!-- <property name="timeout" value="30"/> -->
    </bean>

    <!-- Spring声明式事务 -->
    <!--
    <tx:advice id="userTxAdvice" transaction-manager="jdbcTransactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException" no-rollback-for="java.lang.RuntimeException"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.RuntimeException"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionPointcut"
                      expression="execution(public * com.danny.seckill.service..*.*(..))"/> &lt;!&ndash;把事务控制在Service层 &ndash;&gt;
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="userTxAdvice"/>
    </aop:config>

    &lt;!&ndash; 使用annotation注解方式配置事务 &ndash;&gt;
    <tx:annotation-driven transaction-manager="jdbcTransactionManager" />-->

    <!-- AOP日志配置 -->
    <aop:config>
        <aop:aspect id="xxLogTraceAspect" ref="logTraceAspect">
            <aop:pointcut id="logPointcut" expression="execution(* com.danny.seckill.service..*.*(..))"></aop:pointcut>
            <aop:around method="logTrace" pointcut-ref="logPointcut"></aop:around>
        </aop:aspect>
    </aop:config>

    <bean id="logTraceAspect" class="com.danny.seckill.framework.log.trace.LogTraceAspect">

    </bean>
</beans>